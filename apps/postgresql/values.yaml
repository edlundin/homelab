# Bitnami PostgreSQL Helm Chart Values
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql

# Global settings
global:
  postgresql:
    auth:
      # Reference the sealed secret for credentials
      existingSecret: "postgresql-credentials"
      secretKeys:
        adminPasswordKey: "postgres-password"
        userPasswordKey: "password"
        replicationPasswordKey: "replication-password"

# PostgreSQL configuration
auth:
  # Use default postgres database - services will create their own databases
  database: "postgres"
  username: "postgres"
  # Passwords are loaded from the sealed secret
  existingSecret: "postgresql-credentials"
  secretKeys:
    adminPasswordKey: "postgres-password"
    userPasswordKey: "postgres-password" # postgres user password

# Architecture: standalone (single instance)
architecture: standalone

# Primary instance configuration
primary:
  # Persistence
  persistence:
    enabled: true
    storageClass: "longhorn"
    size: 15Gi
    accessModes:
      - ReadWriteOnce

  # Resource limits
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 2Gi

  # PostgreSQL configuration optimized for Matrix Synapse
  extendedConfiguration: |
    # Performance tuning
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 128MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 2621kB
    min_wal_size = 1GB
    max_wal_size = 4GB

    # Logging
    log_timezone = 'UTC'
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on

    # Extensions
    shared_preload_libraries = 'pg_stat_statements'

  # Init DB arguments - UTF8 encoding required for multiple services
  initdb:
    args: "--encoding=UTF8 --locale=C"
    user: postgres
    password: ""

  # Init scripts to create databases for different services
  # Add more scripts here for additional services (e.g., 02-create-nextcloud.sh)
  initdbScripts:
    01-create-synapse.sh: |
      #!/bin/bash
      set -e

      echo "Creating synapse database and user..."

      # Read synapse password from the credentials secret
      # The password should match what's in postgresql-credentials secret under 'synapse-password' key
      SYNAPSE_PASSWORD="${SYNAPSE_PASSWORD}"

      if [ -z "$SYNAPSE_PASSWORD" ]; then
        echo "Warning: SYNAPSE_PASSWORD not set, using placeholder"
        SYNAPSE_PASSWORD="changeme_generate_secure_password"
      fi

      psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        -- Create synapse user
        DO \$\$
        BEGIN
          IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'synapse') THEN
            CREATE ROLE synapse WITH LOGIN PASSWORD '$SYNAPSE_PASSWORD';
            RAISE NOTICE 'Created synapse user';
          ELSE
            RAISE NOTICE 'Synapse user already exists';
          END IF;
        END
        \$\$;
        
        -- Create synapse database if it doesn't exist
        SELECT 'CREATE DATABASE synapse OWNER synapse ENCODING UTF8 LC_COLLATE ''C'' LC_CTYPE ''C'' TEMPLATE template0'
        WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'synapse')\gexec
        
        -- Grant privileges
        GRANT ALL PRIVILEGES ON DATABASE synapse TO synapse;
      EOSQL

      echo "Synapse database and user setup completed"

  # Extra environment variables for init scripts (from secret)
  extraEnvVarsSecret: "postgresql-credentials"

  # Service configuration
  service:
    type: ClusterIP
    ports:
      postgresql: 5432

# Security context
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL

podSecurityContext:
  enabled: true
  fsGroup: 1001

# Metrics (disabled - enable when Prometheus Operator is available)
metrics:
  enabled: false
  serviceMonitor:
    enabled: false

# Volume permissions (for Longhorn)
volumePermissions:
  enabled: true
  securityContext:
    runAsUser: 0

# Disable read replicas (standalone mode)
readReplicas:
  replicaCount: 0
