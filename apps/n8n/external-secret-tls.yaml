---
# SecretStore to access secrets from the traefik namespace
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: traefik-secret-store
  namespace: n8n
spec:
  provider:
    kubernetes:
      remoteNamespace: traefik
      server:
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          key: ca.crt
      auth:
        serviceAccount:
          name: n8n-external-secrets-sa

---
# ServiceAccount for accessing secrets in traefik namespace
apiVersion: v1
kind: ServiceAccount
metadata:
  name: n8n-external-secrets-sa
  namespace: n8n

---
# Role in traefik namespace to read TLS secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: read-traefik-tls-secrets
  namespace: traefik
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["wildcard-tls-oisd"]
    verbs: ["get", "list", "watch"]

---
# RoleBinding to grant n8n ServiceAccount access to traefik secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: n8n-read-traefik-tls-secrets
  namespace: traefik
subjects:
  - kind: ServiceAccount
    name: n8n-external-secrets-sa
    namespace: n8n
roleRef:
  kind: Role
  name: read-traefik-tls-secrets
  apiGroup: rbac.authorization.k8s.io

---
# ExternalSecret to sync wildcard TLS certificate into n8n namespace
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: wildcard-tls-oisd
  namespace: n8n
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: traefik-secret-store
    kind: SecretStore
  target:
    name: wildcard-tls-oisd
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ .crt }}"
        tls.key: "{{ .key }}"
  data:
    - secretKey: crt
      remoteRef:
        key: wildcard-tls-oisd
        property: tls.crt
    - secretKey: key
      remoteRef:
        key: wildcard-tls-oisd
        property: tls.key
